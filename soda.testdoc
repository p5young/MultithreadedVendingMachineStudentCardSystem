WATCola Test Doc
------------------------------------

Too Many Args Test
------------------------------------
Input: ./soda soda.config 2 3
Output:
Usage: ./soda [ config-file [ random-seed (> 0) ] ]
Analysis: Error shown, program exits

Invalid Seed Test
------------------------------------
Input: ./soda soda.config -1
Input: ./soda soda.config 0
Input: ./soda soda.config 5a6
Output:
Usage: ./soda [ config-file [ random-seed (> 0) ] ]
Analysis: Error shown, program exits 

Unavailable Config File Test
------------------------------------
Input: ./soda notARealConfig
Output:
Error: could not open input file "notARealConfig"
Analysis: Program exits with error message

Config File Test
------------------------------------
Input: ./soda testConfig
Output:
// Normal execution result omitted for space
---
Note:
testConfig contents:
             MaxPurchases 8              #random comment
  
  SodaCost 2		# Manufacturer Suggested Retail Price (MSRP) per bottle
  NumStudents 1		# number of students to create
  
  #random comment
  NumVendingMachines 3	# number of vending machines
  MaxStockPerFlavour 5	# maximum number of bottles of each flavour in a vending machine
  MaxShippedPerFlavour 3	# maximum number of bottles of each flavour generated by the bottling
  			# plant per production run
  TimeBetweenShipments 3	# length of time between shipment pickup
  GroupoffDelay 1		# length of time between new initializing gift cards
  ParentalDelay 2		# length of time between new deposits of funds
  NumCouriers 3		# maximum number of couriers in the pool
---
Random whitespace, random comments, blank lines, and reordered constants.
Analysis: Program uses testConfig instead of soda.config,
proper values imported.


---------------------------------------------------------------------------
EXPECTED LOGICAL RULES FOR EXECUTION **************************************
---------------------------------------------------------------------------
    Plant, truck, and machine stock values are consistent with each other.
    Exceptions are being properly received and handled by student.
        Watcard balance doesn't go down when free.
        Outofstock doesn't count towards sodas wanted.
        Insufficient balance doesn't count towards sodas wanted, doesn't decrease balance further.
    Watcard balances are consistent with spending/depositing by parent
    Vending machine not being interacted with while restocking - no buy calls
    Vending machine requests are consistent between student and nameserver
    Printer header, footer, and flush times are correct
    Every class prints appropriate start message on construction and final message on destruction
    Bank blocks thread attempting to withdraw if insufficient funds
    Bank wakes up blocked thread upon deposit in corresponding account
    Bank deposit/ withdraw adjust balance properly
    Parent yields 'parentalDelay' times before each deposit
    Parent has proper bounds on random values for deposit amount and student account
    Parent chooses random numbers in correct order (verified by comparison to example program)
    Parent displays correct message on deposit
    Groupoff gives out giftCards properly
    Groupoff only fulfills giftCards after all the futures have been handed out
    Groupoff yields groupoffDelay before each future fulfillment
    Groupoff only delivers a giftCard if the student hasn't been destroyed (future cancelled)
    Groupoff prints delivery message properly
    Groupoff destructor can be called whether all giftCards have been given out or not
    WATCardOffice doesn't make any calls to other classes (because it's an administrator)
    WATCardOffice ensures couriers are unblocked and ready for destruction before destroying itself
    WATCardOffice signals couriers when work is available
    WATCardOffice creates corrent number of Couriers
    WATCardOffice prints correct messages for transfer, create, and request work
    Courier has 1 in 6 chance of losing card
    Courier prints appropriate message for starting transfer, losing card, and finishing transfer
    Courier doesn't deliver cards to destructed students (checks if future cancelled)
    Courier destroys watCard after card update if lost
    Courier can lose a card on a transfer or creation
    Courier can be destroyed any time a job is finished (WATCardoffice lets couriers finish jobs before destruction)
    Student checks giftCard and WATCard availability on every purchase
    Student continues attempting purchase until success if Funds, Stock, or Lost exception is found
    Student yields correct number of times before each purchase attempt
    Student prints proper messages
    Student cancels unavailable futures upon destruction to ensure they're not delivered after student dies
    Student purchases correct amount of soda, as determined by random value (1, maxPurchases)
    Student main() or destructor() can both handle lost WATCard exception
    Student always destroys any WATCard or giftCard it receives
    Student doesn't attempt any purchases with an empty giftCard
    Student makes proper calls to WATCardOffice for transfers and creation of WATCard
    Student makes proper call to groupOff for giftCard
    Student yields 4 times on free soda
    NameServer requests properly increment individually for each student
    NameServer allows no machine requests go through until all registered
    NameServer assigns each student a round robin machine id on first request
    Bottling plant only generates once per pickup
    Truck delivers as much as it can per pickup & stops immediately when out of cargo
    Truck removes all old stock when pickup occurs

    
soda.config is the default assignment config file

Basic Execution Test
------------------------------------
Input: ./soda soda.config 
soda.config adjusted for more students
Output: seed(170068)

Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Mach0	Mach1	Mach2	Cour0	Cour1	Cour2
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
S	S	S	S					S2			S	S	S
D0,3			R0						S2
D0,2			R1							S2
D1,1		C0,5	R2	S	S	S3,7
D1,2		W	N0,0			V0	S0,3				t0,5
D1,3					G4						T0,5
D1,1		C1,5	N1,1				V1
		W										t1,5
												L1
D0,2	D2											T1,5
D0,1	D2			P4	P
D0,3			N0,1	d0,4		V1		r
				U0,16
D0,1			N0,2	D0,0	G1	V2
D0,2			N0,0			V0		R
D1,2			N1,2		P		V2
D1,1				P1
				d1,1					r
				U1,19
D0,1			N0,1	D1,0		V1
D0,1			N1,0		G8		V0	B0,1	R
D0,3						G3,0	G0,0		B3,0
D0,2					P
D1,2				P8
				d2,8						r
				U2,12
D1,3				D2,0						R
D1,3		C1,5	N0,2		G5	V2	L			B3,2
D0,3		W											t1,5
													L1
D0,2						B3,3	L						T1,5
D0,3		C1,5
		W									t1,5
D0,3					P			B0,0		B3,1	T1,5
D0,3				P5		A3,3	B0,3
D1,1				d0,5				r
				U0,13
D1,2				D0,0	G4			R
D1,1
D1,2			N1,1			B3,1	V1			B3,0
D0,1			N1,2	P4	P		V2
				d1,4					r
				U1,16
D1,3				D1,0			B0,1			B0,1
D0,1					G8		F		R
D1,2
D0,2
D0,2			N0,0	P8	P	V0
D1,2				d2,8						r
				U2,8
		T0,7		D2,0
		W										t0,7
												L0
D0,2					G8	L				R		T0,7
D1,2		C0,5
D0,1		W			P								t0,5
				P8									T0,5
				d0,8				r
				U0,6
D0,1				D0,1
				d1,1					r
				U1,15
D0,2				D1,0	G8			R
D0,3						B3,3		B3,3	R
D1,2				P8	P
				d2,8						r
				U2,3
D0,1				D2,3
D1,1				d0,3	G8	B3,1		B3,2		R
D1,2				U0,5				r
D1,1				D0,0
D0,3								R
D0,3
D0,2		T0,7
		W									t0,7
D1,3								B3,1			T0,7
D0,3						B3,6
D0,3	F			P8	P	F
				d1,8					r
				U1,8
D0,2				D1,1
				d2,1						r
				U2,3
D1,2				D2,1	G6				R
				d0,1				r
				U0,6
D1,1				D0,1						R
D1,1								R
D0,1
D0,1
D0,2					P
D0,3				F	F
D0,2												F
D1,1													F
D0,1											F
D0,2		F
D1,3								F
D1,3									F
D0,2										F
D1,2			F
D0,2
F
***********************
Analysis: Meets all above rules and expectations - successful run.


Max Purchase of 1 Test
---------------------------------
input: ./soda soda.config 135611
    soda.config adjusted for 5 students, MaxPurchase=1, 1 vending machine
output:
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Stud2	Stud3	Stud4	Mach0	Cour0	Cour1	Cour2
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
S	S	S	S								S2	S	S	S
D4,2			R0	S	S	S1,1
D1,1					G7
D0,3		C0,5	N0,0			V0	S1,1
D3,3		W		P7	P							t0,5
				d0,7							r
				U0,13
D3,3		C1,5	N1,0	D0,0			V0	S3,1
D2,3		W									R		t1,5
D1,2		C2,5	N2,0		G6			V0	S1,1
D0,1		W												t2,5
D1,1		C3,5	N3,0						V0	S2,1
D0,2	D2	C4,5	N4,0		P					V0		T0,5
		W										t3,5
	D2			P6								T3,5
D0,2	D2	W		d0,6			G1,0				B1,2	t4,5
D2,3	D2						F
	D2													L2
				U0,8							r			T2,5
D4,2				D0,0	G4
D2,1											R
D2,3						B1,3					B1,1
D3,2						F
D2,3									a1,2		B1,0
D1,1					P								T1,5
D4,3				P4							B3,4
				d0,4				G3,0				T4,5
D1,3				U0,7				F	F		r
D0,3				D0,0	G6
D2,3											R
D3,1										G2,0	B2,0
D2,2	F									F
D2,3
D4,1					P
D0,3				F	F
D3,1														F
D4,1													F
D2,1												F
D2,3		F
D0,2											F
D3,3			F
D4,1
F
***********************
Analysis: Output meets all above rules and expectations. Every student roundrobin selects the only machine.
    Purchase is made, followed by termination.
    Any type of purchase proceeds successfully.
    Giftcard delivered but not used in some case.


Max Stock of 1 Test
----------------------------------
input: ./soda soda.config 91883
    soda.config modified for max vending machine stock of 1 per flavour
    multiple machines configured as well
output:
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Mach0	Mach1	Mach2	Cour0	Cour1	Cour2
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
S	S	S	S					S2			S	S	S
D1,1			R0						S2
D1,3			R1							S2
D1,2		C0,5	R2	S	S	S1,1
D1,2		W	N0,0		G6	V0	S0,1				t0,5
D0,3		C1,5
		W										t1,5
D0,2	D2		N1,1				V1				T0,5	T1,5
D1,2	D2		N0,1	P6	P	V1
D1,1				d0,6				r
				U0,1
D1,1			N0,2	D0,3		V2
				d1,3					r
				U1,2
D0,3			N0,0	D1,1	G7	V0		R
				d2,1						r
				U2,3
D0,3				D2,0		G1,0		B1,0	R
D0,3			N1,2			F	V2			R
D1,1			N1,0				V0
D0,1			N1,1				V1
D0,1			N1,2				V2
D0,1			N1,0	P7	P		V0
D1,3			N1,1	d0,7			V1
D1,2			N1,2	D0,5	G3		V2	r
D1,2				d1,5					r
D0,2			N1,0	D1,3			V0	R
				d2,3						r
				U2,1
D0,3				D2,1			G0,0	B0,0	R
D1,1	F						F			R
D1,3
D1,3
D0,3
D0,3
D1,1					P
D0,3				F	F
D0,1													F
D1,2												F
D0,2											F
D1,1		F
D0,3								F
D0,1									F
D0,2										F
D1,1			F
D1,1
F
***********************
Analysis: Output conforms to all rules and expectations.
    Truck deposits one of each flavour if missing and moves to next machine.
    Proper machine index chaining on each supply run.


Leftover Stock Spoil Test
-------------------------------
input: ./soda soda.config 18064
    soda.config modified for max stock of 1, only a single machine
output:
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Mach0	Cour0	Cour1	Cour2
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******
S	S	S	S					S2	S	S	S
D1,3			R0	S	S	S1,1
D0,1					G6
D1,1		C0,5	N0,0			V0	S3,1
D0,2		W							t0,5
D0,2		C1,5	N1,0				V0		T0,5
D1,2	D2	W		P6	P					t1,5
D1,3	D2		N0,0	d0,6		V0		r		T1,5
				U0,2
D1,2				D0,4	G9
D0,3								R
D0,1			N0,0	P9	P	V0
D1,2				d0,9				r
				U0,1
D0,2				D0,8	G9
D1,3								R
D0,2							G3,0	B3,0
D1,3					P		F
D1,2				P9
D0,3			N0,0	d0,9		V0		r
				U0,1
D1,2				D0,8	G5
D1,2								R
D1,1			N0,0			V0
D0,2
D0,2			N0,0			V0
D0,1					P
D0,1				P5
D0,2			N0,0	d0,5		V0		r
				U0,1
D0,2				D0,5	G11
D0,1								R
D0,1			N0,0			V0
D0,2
D0,3			N0,0	P11	P	V0
D0,2				d0,11				r
				U0,1
D0,2				D0,11	G8
D0,3								R
D1,3			N0,0			V0
D0,1
D0,2			N0,0	P8	P	V0
D1,1				d0,8				r
				U0,1
D1,2				D0,8	G5
D0,1								R
D0,1			N0,0			V0
D1,2
D1,3			N0,0			V0
D1,1
D1,2			N0,0	P5	P	V0
D1,2				d0,5				r
D1,3				D0,4	G8
D1,3								R
D0,1						G1,0		B1,0
D1,2	F					F
D0,3
D0,2
D0,1					P
D1,1				F	F
D0,2											F
D0,1									F
D0,3										F
D0,2		F
D1,1								F
D1,2			F
D0,1
F
***********************
Analysis: Output conforms to all above rules and expectations.
    Machine completely replaces leftover cargo after every delivery run. Soda does not carry over.


